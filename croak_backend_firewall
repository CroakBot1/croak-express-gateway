// === CROAK BOT BACKEND ‚Äì GUARDIAN MODE V2 + LICENSE VALIDATION FINAL FIX üõ°Ô∏èüê∏ ===
const express = require('express');
const crypto = require('crypto');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
const axios = require('axios');
const fs = require('fs');
const path = require('path');

const app = express();
const PORT = process.env.PORT || 3000;

// === CONFIG ===
const SHARED_SECRET = 'croak_secret_98765';
const DISCORD_WEBHOOK = 'https://discord.com/api/webhooks/your_webhook_here';
const LICENSE_FILE = path.join(__dirname, 'license.json');
const LOG_FILE = 'guardian_logs.json';
const BLOCKED_IPS = {};

// === MIDDLEWARE ===
app.use(express.json());
app.use(helmet());

app.use(rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 100,
  message: '‚ö†Ô∏è Too many requests. Slow down.'
}));

// === UTILITIES ===
function looksSuspicious(input) {
  return typeof input === 'string' && /<script|eval\(|SELECT|UNION|INSERT|\$\{|\*\*|=>/i.test(input);
}

function analyzeThreat(req) {
  const { licenseKey, signal, data, signature } = req.body;
  let threatScore = 0;
  if (!licenseKey || typeof licenseKey !== 'string') threatScore += 2;
  if (!signature) threatScore += 5;
  if (looksSuspicious(signal)) threatScore += 10;
  if (typeof data === 'string' && looksSuspicious(data)) threatScore += 5;
  if (!['BUY','SELL','WAIT','TRAP'].includes(signal)) threatScore += 3;
  return threatScore;
}

function isValidSignature(payload, signature) {
  const hash = crypto.createHmac('sha256', SHARED_SECRET)
    .update(JSON.stringify(payload)).digest('hex');
  return signature === hash;
}

function sendDiscordAlert(msg) {
  axios.post(DISCORD_WEBHOOK, { content: msg }).catch(console.error);
}

function logRequest(req, threatScore, blocked) {
  const log = {
    timestamp: new Date().toISOString(),
    ip: req.ip,
    signal: req.body.signal,
    score: threatScore,
    blocked: blocked,
    reason: blocked ? 'Threat detected' : 'Passed'
  };
  console.log('üìù Log:', log);
  fs.appendFileSync(LOG_FILE, JSON.stringify(log) + '\n');
}

function loadLicenses() {
  if (!fs.existsSync(LICENSE_FILE)) return {};
  const raw = fs.readFileSync(LICENSE_FILE);
  return JSON.parse(raw);
}

function saveLicenses(data) {
  fs.writeFileSync(LICENSE_FILE, JSON.stringify(data, null, 2));
}

// === CROAK BOT SIGNAL EXECUTION ===
app.post('/croak/execute', (req, res) => {
  const ip = req.ip;
  const { signal, data, licenseKey, signature } = req.body;
  const threat = analyzeThreat(req);

  if (!isValidSignature({ signal, data }, signature)) {
    sendDiscordAlert(`üö® Signature Mismatch: IP ${ip}`);
    return res.status(403).json({ error: '‚ùå Invalid Signature' });
  }

  if (BLOCKED_IPS[ip] && Date.now() < BLOCKED_IPS[ip]) {
    return res.status(403).json({
      error: '‚õî IP temporarily blocked',
      retryAfter: new Date(BLOCKED_IPS[ip]).toISOString()
    });
  }

  if (threat >= 10) {
    BLOCKED_IPS[ip] = Date.now() + 24 * 60 * 60 * 1000;
    sendDiscordAlert(`üö® IP Blocked: ${ip}, Threat Score: ${threat}`);
    logRequest(req, threat, true);
    return res.status(403).json({
      error: '‚ö†Ô∏è Suspicious behavior detected.',
      threatScore: threat
    });
  }

  logRequest(req, threat, false);
  res.json({ success: true, message: '‚úÖ Signal Accepted' });
});

// === LICENSE VALIDATION ===
app.post('/croak/validate', (req, res) => {
  const { licenseKey, clientIP } = req.body;
  const key = String(licenseKey);

  if (!key || !clientIP) {
    return res.status(400).json({ valid: false, message: 'Missing licenseKey or clientIP' });
  }

  const licenses = loadLicenses();
  const entry = licenses[key];

  if (!entry) {
    return res.status(404).json({ valid: false, message: 'License not found' });
  }

  if (entry.used && entry.boundIP !== clientIP) {
    return res.status(403).json({ valid: false, message: 'License already used on another IP' });
  }

  if (!entry.used) {
    entry.used = true;
    entry.boundIP = clientIP;
    licenses[key] = entry;
    saveLicenses(licenses);
  }

  res.json({
    valid: true,
    message: 'License validated',
    boundIP: entry.boundIP
  });
});

// === STATUS ===
app.get('/', (req, res) => {
  res.send('üü¢ Croak Guardian + License Validator Backend is Online');
});

// === LAUNCH ===
app.listen(PORT, () => {
  console.log(`üü¢ CROAK BACKEND ONLINE ON PORT ${PORT}`);
});
