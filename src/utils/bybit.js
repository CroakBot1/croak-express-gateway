// src/utils/bybit.js

const logger = require('./logger');
const axios = require('axios');

const MOCK_CAPITAL = 1000;

function getMockCapital() {
Â  logger.info('[ðŸ’° MOCK CAPITAL] Returning default', MOCK_CAPITAL, 'USDT');
Â  return MOCK_CAPITAL;
}

function getMockMemoryState() {
Â  logger.info('[ðŸ§  MOCK MEMORY STATE] Returning default memory state');
Â  return {
Â  Â  entryPrice: 0,
Â  Â  positionSize: 0,
Â  Â  direction: null,
Â  Â  pnl: 0,
Â  Â  changePct: 0
Â  };
}

async function placeMockOrder({ side, qty, price }) {
Â  logger.execution('MOCK ORDER PLACED', price, qty, 'ETHUSDT');
Â  return {
Â  Â  success: true,
Â  Â  data: {
Â  Â  Â  orderId: 'MOCK-' + Date.now(),
Â  Â  Â  side,
Â  Â  Â  qty,
Â  Â  Â  price
Â  Â  }
Â  };
}

async function getMockMarketData(symbol = 'ETHUSDT') {
Â  try {
Â  Â  const response = await axios.get('https://api.bybit.com/v2/public/tickers?symbol=' + symbol);
Â  Â  const ticker = response.data.result[0];
Â  Â  return {
Â  Â  Â  lastPrice: parseFloat(ticker.last_price),
Â  Â  Â  markPrice: parseFloat(ticker.mark_price),
Â  Â  Â  indexPrice: parseFloat(ticker.index_price)
Â  Â  };
Â  } catch (err) {
Â  Â  logger.error('[ðŸ“‰ MARKET FETCH ERROR]', err.message);
Â  Â  return {
Â  Â  Â  lastPrice: 0,
Â  Â  Â  markPrice: 0,
Â  Â  Â  indexPrice: 0
Â  Â  };
Â  }
}

module.exports = {
Â  getCapital: getMockCapital,
Â  getMemoryState: getMockMemoryState,
Â  placeOrder: placeMockOrder,
Â  getMarketData: getMockMarketData
};
